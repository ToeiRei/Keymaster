package db

import (
	"database/sql"
	"fmt"

	_ "github.com/jackc/pgx/v5/stdlib" // PostgreSQL driver
	"github.com/toeirei/keymaster/internal/model"
)

// PostgresStore is the PostgreSQL implementation of the Store interface.
type PostgresStore struct {
	db *sql.DB
}

// NewPostgresStore initializes the database connection and creates tables if they don't exist.
func NewPostgresStore(dataSourceName string) (*PostgresStore, error) {
	db, err := sql.Open("pgx", dataSourceName)
	if err != nil {
		return nil, fmt.Errorf("failed to open database: %w", err)
	}

	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	if err := runPostgresMigrations(db); err != nil {
		return nil, fmt.Errorf("database migration failed: %w", err)
	}

	return &PostgresStore{db: db}, nil
}

func runPostgresMigrations(db *sql.DB) error {
	tables := []string{
		`CREATE TABLE IF NOT EXISTS accounts (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			username TEXT NOT NULL,
			hostname TEXT NOT NULL,
			label TEXT,
			serial INTEGER NOT NULL DEFAULT 0,
			is_active BOOLEAN NOT NULL DEFAULT TRUE,
			UNIQUE(username, hostname)
		);`,
		`CREATE TABLE IF NOT EXISTS public_keys (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			algorithm TEXT NOT NULL,
			key_data TEXT NOT NULL,
			comment TEXT NOT NULL UNIQUE
		);`,
		`CREATE TABLE IF NOT EXISTS account_keys (
			account_id INTEGER NOT NULL,
			key_id INTEGER NOT NULL,
			PRIMARY KEY (account_id, key_id),
			FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
			FOREIGN KEY (key_id) REFERENCES public_keys (id) ON DELETE CASCADE
		);`,
		`CREATE TABLE IF NOT EXISTS system_keys (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			serial INTEGER NOT NULL UNIQUE,
			public_key TEXT NOT NULL,
			private_key TEXT NOT NULL,
			is_active BOOLEAN NOT NULL DEFAULT FALSE
		);`,
		`CREATE TABLE IF NOT EXISTS known_hosts (
			hostname TEXT NOT NULL PRIMARY KEY,
			key TEXT NOT NULL
		);`,
		`CREATE TABLE IF NOT EXISTS audit_log (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
			username TEXT NOT NULL,
			action TEXT NOT NULL,
			details TEXT
		);`,
	}

	for _, tableSQL := range tables {
		if _, err := db.Exec(tableSQL); err != nil {
			return err
		}
	}

	// For Postgres, ALTER TABLE is more transactional and less likely to fail
	// if run multiple times in a safe way. We can use `IF NOT EXISTS`.
	migrations := []string{
		"ALTER TABLE accounts ADD COLUMN IF NOT EXISTS is_active BOOLEAN NOT NULL DEFAULT TRUE;",
		"ALTER TABLE accounts ADD COLUMN IF NOT EXISTS label TEXT;",
	}

	for _, migrationSQL := range migrations {
		if _, err := db.Exec(migrationSQL); err != nil {
			return err
		}
	}

	return nil
}

// --- Stubbed Methods ---

func (s *PostgresStore) GetAllAccounts() ([]model.Account, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) AddAccount(username, hostname, label string) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) DeleteAccount(id int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) UpdateAccountSerial(id, serial int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) ToggleAccountStatus(id int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) UpdateAccountLabel(id int, label string) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetAllActiveAccounts() ([]model.Account, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) AddPublicKey(algorithm, keyData, comment string) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetAllPublicKeys() ([]model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetPublicKeyByComment(comment string) (*model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) AddPublicKeyAndGetModel(algorithm, keyData, comment string) (*model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) DeletePublicKey(id int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetKnownHostKey(hostname string) (string, error) {
	return "", fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) AddKnownHostKey(hostname, key string) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) CreateSystemKey(publicKey, privateKey string) (int, error) {
	return 0, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) RotateSystemKey(publicKey, privateKey string) (int, error) {
	return 0, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetActiveSystemKey() (*model.SystemKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetSystemKeyBySerial(serial int) (*model.SystemKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) HasSystemKeys() (bool, error) {
	return false, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) AssignKeyToAccount(keyID, accountID int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) UnassignKeyFromAccount(keyID, accountID int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetKeysForAccount(accountID int) ([]model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetAccountsForKey(keyID int) ([]model.Account, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetAllAuditLogEntries() ([]model.AuditLogEntry, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) LogAction(action string, details string) error {
	return fmt.Errorf("not implemented for postgres")
}
