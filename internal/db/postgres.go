package db

import (
	"database/sql"
	"fmt"
	"os/user"
	"strings"

	_ "github.com/jackc/pgx/v5/stdlib" // PostgreSQL driver
	"github.com/toeirei/keymaster/internal/model"
)

// PostgresStore is the PostgreSQL implementation of the Store interface.
type PostgresStore struct {
	db *sql.DB
}

// NewPostgresStore initializes the database connection and creates tables if they don't exist.
func NewPostgresStore(dataSourceName string) (*PostgresStore, error) {
	db, err := sql.Open("pgx", dataSourceName)
	if err != nil {
		return nil, fmt.Errorf("failed to open database: %w", err)
	}

	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	if err := runPostgresMigrations(db); err != nil {
		return nil, fmt.Errorf("database migration failed: %w", err)
	}

	return &PostgresStore{db: db}, nil
}

func runPostgresMigrations(db *sql.DB) error {
	tables := []string{
		`CREATE TABLE IF NOT EXISTS accounts (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			username TEXT NOT NULL,
			hostname TEXT NOT NULL,
			label TEXT,
			serial INTEGER NOT NULL DEFAULT 0,
			is_active BOOLEAN NOT NULL DEFAULT TRUE,
			UNIQUE(username, hostname)
		);`,
		`CREATE TABLE IF NOT EXISTS public_keys (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			algorithm TEXT NOT NULL,
			key_data TEXT NOT NULL,
			comment TEXT NOT NULL UNIQUE
		);`,
		`CREATE TABLE IF NOT EXISTS account_keys (
			account_id INTEGER NOT NULL,
			key_id INTEGER NOT NULL,
			PRIMARY KEY (account_id, key_id),
			FOREIGN KEY (account_id) REFERENCES accounts (id) ON DELETE CASCADE,
			FOREIGN KEY (key_id) REFERENCES public_keys (id) ON DELETE CASCADE
		);`,
		`CREATE TABLE IF NOT EXISTS system_keys (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			serial INTEGER NOT NULL UNIQUE,
			public_key TEXT NOT NULL,
			private_key TEXT NOT NULL,
			is_active BOOLEAN NOT NULL DEFAULT FALSE
		);`,
		`CREATE TABLE IF NOT EXISTS known_hosts (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			hostname TEXT NOT NULL UNIQUE,
			"key" TEXT NOT NULL
		);`,
		`CREATE TABLE IF NOT EXISTS audit_log (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			timestamp TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
			username TEXT NOT NULL,
			action TEXT NOT NULL,
			details TEXT
		);`,
	}

	for _, tableSQL := range tables {
		if _, err := db.Exec(tableSQL); err != nil {
			return err
		}
	}

	return nil
}

// --- Stubbed Methods ---

func (s *PostgresStore) GetAllAccounts() ([]model.Account, error) {
	rows, err := s.db.Query("SELECT id, username, hostname, label, serial, is_active FROM accounts ORDER BY label, hostname, username")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var accounts []model.Account
	for rows.Next() {
		var acc model.Account
		var label sql.NullString
		if err := rows.Scan(&acc.ID, &acc.Username, &acc.Hostname, &label, &acc.Serial, &acc.IsActive); err != nil {
			return nil, err
		}
		if label.Valid {
			acc.Label = label.String
		}
		accounts = append(accounts, acc)
	}
	return accounts, nil
}

func (s *PostgresStore) AddAccount(username, hostname, label string) error {
	// Postgres uses $1, $2, etc. for placeholders.
	_, err := s.db.Exec("INSERT INTO accounts(username, hostname, label) VALUES($1, $2, $3)", username, hostname, label)
	if err == nil {
		_ = s.LogAction("ADD_ACCOUNT", fmt.Sprintf("account: %s@%s", username, hostname))
	}
	return err
}

func (s *PostgresStore) DeleteAccount(id int) error {
	// Get account details before deleting for logging.
	var username, hostname string
	err := s.db.QueryRow("SELECT username, hostname FROM accounts WHERE id = $1", id).Scan(&username, &hostname)
	details := fmt.Sprintf("id: %d", id)
	if err == nil {
		details = fmt.Sprintf("account: %s@%s", username, hostname)
	}

	_, err = s.db.Exec("DELETE FROM accounts WHERE id = $1", id)
	if err == nil {
		_ = s.LogAction("DELETE_ACCOUNT", details)
	}
	return err
}

func (s *PostgresStore) UpdateAccountSerial(id, serial int) error {
	_, err := s.db.Exec("UPDATE accounts SET serial = $1 WHERE id = $2", serial, id)
	// This is called during deployment, which is logged at a higher level.
	// No need for a separate log action here.
	return err
}

func (s *PostgresStore) ToggleAccountStatus(id int) error {
	// Get account details before toggling for logging.
	var username, hostname string
	var isActive bool
	err := s.db.QueryRow("SELECT username, hostname, is_active FROM accounts WHERE id = $1", id).Scan(&username, &hostname, &isActive)
	if err != nil {
		return err // If we can't find it, we can't toggle it.
	}

	_, err = s.db.Exec("UPDATE accounts SET is_active = NOT is_active WHERE id = $1", id)
	if err == nil {
		details := fmt.Sprintf("account: %s@%s, new_status: %t", username, hostname, !isActive)
		_ = s.LogAction("TOGGLE_ACCOUNT_STATUS", details)
	}
	return err
}

func (s *PostgresStore) UpdateAccountLabel(id int, label string) error {
	_, err := s.db.Exec("UPDATE accounts SET label = $1 WHERE id = $2", label, id)
	if err == nil {
		_ = s.LogAction("UPDATE_ACCOUNT_LABEL", fmt.Sprintf("account_id: %d, new_label: '%s'", id, label))
	}
	return err
}

func (s *PostgresStore) GetAllActiveAccounts() ([]model.Account, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}

func (s *PostgresStore) AddPublicKey(algorithm, keyData, comment string) error {
	return fmt.Errorf("not implemented for postgres")
}

func (s *PostgresStore) GetAllPublicKeys() ([]model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetPublicKeyByComment(comment string) (*model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) AddPublicKeyAndGetModel(algorithm, keyData, comment string) (*model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) DeletePublicKey(id int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetKnownHostKey(hostname string) (string, error) {
	return "", fmt.Errorf("not implemented for postgres")
}

func (s *PostgresStore) AddKnownHostKey(hostname, key string) error {
	// Use Postgres's ON CONFLICT for "UPSERT" behavior.
	_, err := s.db.Exec(`
		INSERT INTO known_hosts (hostname, "key") VALUES ($1, $2)
		ON CONFLICT (hostname) DO UPDATE SET "key" = EXCLUDED.key`,
		hostname, key)

	if err == nil {
		_ = s.LogAction("TRUST_HOST", fmt.Sprintf("hostname: %s", hostname))
	}
	return err
}

func (s *PostgresStore) CreateSystemKey(publicKey, privateKey string) (int, error) {
	return 0, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) RotateSystemKey(publicKey, privateKey string) (int, error) {
	return 0, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetActiveSystemKey() (*model.SystemKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetSystemKeyBySerial(serial int) (*model.SystemKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) HasSystemKeys() (bool, error) {
	return false, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) AssignKeyToAccount(keyID, accountID int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) UnassignKeyFromAccount(keyID, accountID int) error {
	return fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetKeysForAccount(accountID int) ([]model.PublicKey, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetAccountsForKey(keyID int) ([]model.Account, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}
func (s *PostgresStore) GetAllAuditLogEntries() ([]model.AuditLogEntry, error) {
	return nil, fmt.Errorf("not implemented for postgres")
}

func (s *PostgresStore) LogAction(action string, details string) error {
	// Get current OS user
	currentUser, err := user.Current()
	username := "unknown"
	if err == nil {
		// On Windows, username might be "domain\user", let's just take the user part.
		if parts := strings.Split(currentUser.Username, `\`); len(parts) > 1 {
			username = parts[1]
		} else {
			username = currentUser.Username
		}
	}

	_, err = s.db.Exec("INSERT INTO audit_log (username, action, details) VALUES ($1, $2, $3)", username, action, details)
	return err
}
